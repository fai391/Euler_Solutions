%Project Euler #12
%The sequence of triangle numbers is generated by adding the natural 
%numbers. So the 7th triangle number would be:
%1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
%
%The first ten terms would be:
%1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
%
%Let us list the factors of the first seven triangle numbers:
% 
%  1: 1
%  3: 1,3
%  6: 1,2,3,6
% 10: 1,2,5,10
% 15: 1,3,5,15
% 21: 1,3,7,21
% 28: 1,2,4,7,14,28
% We can see that 28 is the first triangle number to have over five
% divisors.
% 
% What is the value of the first triangle number to have over five hundred
% divisors?

clear all
clc
triangle=0;
n_factor=[1];
j=1;
max_length=1;

while length(n_factor)< 500
    triangle=triangle+j;    %calculate next triangle number
    %%Then find all of the factors.
    n=triangle;
    if isprime(n)==0    
        %check if it's a prime number (not enough factors if true)
        n_fac=[1,factor(n)];
        if length(n_fac)>5  
            %check if the number of factors is > 5 (just to speed up)
            i=2;
            while i<length(n_fac) 
                %loop to multiply the prime factors together to make
                %non-prime multiples.
                k=1;
                while k<(length(n_fac)-i)
                    temp = n_fac(i)*n_fac(i+k);
                    if n/temp==floor(n/temp) && any(n_fac(:)==temp)==0 
                        % is the value a multiple and is it not already 
                        % in the factor vector?
                        n_fac=[n_fac,temp];
                    end
                    k=k+1;
                end
                i=i+1;
            end
            n_fac=sort(n_fac);          %sort factors
            n_factor=[];
            for i=1:(length(n_fac)-1)   %remove duplicate primes
                if n_fac(i)~=n_fac(i+1)
                    n_factor=[n_factor,n_fac(i)];
                end
            end
            %final vector containing all factors
            n_factor=[n_factor,n];
        end
    else
        n_fac=[1,n];
    end
    max_length=max(length(n_factor),max_length);   %check length
    j=j+1;
end
n   %diplay result
